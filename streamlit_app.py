import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import joblib
from sklearn.metrics import roc_curve, auc

model = joblib.load("svc_model.pkl")

df = pd.read_csv("cardio_train.csv", sep=";")

# SIDEBAR:
st.sidebar.header("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ")

age_years = st.sidebar.slider("–í–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç)", 18, 100, 50)
age = age_years * 365  # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –¥–Ω–∏

gender = st.sidebar.radio("–ü–æ–ª", options=[1, 2], format_func=lambda x: "–ñ–µ–Ω—â–∏–Ω–∞" if x == 1 else "–ú—É–∂—á–∏–Ω–∞")
height = st.sidebar.number_input("–†–æ—Å—Ç (—Å–º)", 100, 220, 170)
weight = st.sidebar.number_input("–í–µ—Å (–∫–≥)", 30, 200, 70)
ap_hi = st.sidebar.number_input("–°–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (ap_hi)", 80, 200, 120)
ap_lo = st.sidebar.number_input("–î–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (ap_lo)", 50, 140, 80)

cholesterol = st.sidebar.selectbox("–•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω", options=[1, 2, 3],
                                   format_func=lambda x: {1: "–ù–æ—Ä–º–∞", 2: "–í—ã—à–µ –Ω–æ—Ä–º—ã", 3: "–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ"}[x])

gluc = st.sidebar.selectbox("–ì–ª—é–∫–æ–∑–∞", options=[1, 2, 3],
                            format_func=lambda x: {1: "–ù–æ—Ä–º–∞", 2: "–í—ã—à–µ –Ω–æ—Ä–º—ã", 3: "–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ"}[x])

smoke = st.sidebar.radio("–ö—É—Ä–µ–Ω–∏–µ", options=[0, 1], format_func=lambda x: "–ù–µ—Ç" if x == 0 else "–î–∞")
alco = st.sidebar.radio("–ê–ª–∫–æ–≥–æ–ª—å", options=[0, 1], format_func=lambda x: "–ù–µ—Ç" if x == 0 else "–î–∞")
active = st.sidebar.radio("–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", options=[0, 1], format_func=lambda x: "–ù–µ—Ç" if x == 0 else "–î–∞")

# –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
user_data = pd.DataFrame({
    "age": [age],
    "gender": [gender],
    "height": [height],
    "weight": [weight],
    "ap_hi": [ap_hi],
    "ap_lo": [ap_lo],
    "cholesterol": [cholesterol],
    "gluc": [gluc],
    "smoke": [smoke],
    "alco": [alco],
    "active": [active],
})

st.title("ü´Ä Cardiovascular Disease Prediction App")

plot_choice = st.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫:",
    ["–ù–µ—Ç", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤", "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞", "ROC-–∫—Ä–∏–≤–∞—è"]
)

if plot_choice == "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤":
    plt.figure(figsize=(6,4))
    sns.countplot(x="cardio", data=df)
    st.pyplot(plt)

elif plot_choice == "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤":
    plt.figure(figsize=(10,8))
    sns.heatmap(df.corr(), annot=False, cmap="coolwarm")
    st.pyplot(plt)

elif plot_choice == "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞":
    plt.figure(figsize=(6,4))
    sns.histplot(df["age"]/365, bins=30, kde=True)
    plt.xlabel("–í–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç)")
    st.pyplot(plt)

elif plot_choice == "ROC-–∫—Ä–∏–≤–∞—è":
    from sklearn.model_selection import train_test_split
    from sklearn.metrics import roc_curve, auc

    X = df.drop(columns=["cardio"])
    y = df["cardio"]
    _, X_test, _, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    y_score = model.predict_proba(X_test)[:,1]
    fpr, tpr, _ = roc_curve(y_test, y_score)
    roc_auc = auc(fpr, tpr)

    plt.figure()
    plt.plot(fpr, tpr, color="blue", lw=2, label=f"AUC = {roc_auc:.2f}")
    plt.plot([0,1],[0,1], color="red", lw=2, linestyle="--")
    plt.xlabel("False Positive Rate")
    plt.ylabel("True Positive Rate")
    plt.title("ROC-–∫—Ä–∏–≤–∞—è")
    plt.legend(loc="lower right")
    st.pyplot(plt)

if st.sidebar.button("–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"):
    prediction = model.predict(user_data)[0]
    proba = model.predict_proba(user_data)[0][1]

    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
    st.write(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞–ª–∏—á–∏—è —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–æ–≥–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: **{proba:.2f}**")
    st.write(f"–ö–ª–∞—Å—Å: **{'–ï—Å—Ç—å –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ' if prediction == 1 else '–ó–¥–æ—Ä–æ–≤'}**")
